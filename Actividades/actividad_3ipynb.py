# -*- coding: utf-8 -*-
"""Actividad 3ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yzc7cG-klLATRHpwVazp4-zf1pllzCNP

#Actividad 3 
#Entrenamiento de redes neuronales simple 

Emiliano Cavazos Rodriguz 1967273
IMTC Clase: LMV-N1
"""

# Imortaremos TensorFlow y tf.keras
import tensorflow as tf
from tensorflow import keras

# Una vez importado escogeremos las librerias de ayuda que utilizaremos 
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

#Importamos mnist y agregamos las etiquetas 

fashion_mnist = keras.datasets.mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['cero', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve']

"""Despues exploramos el set de datos """

train_images.shape

len(train_labels)

train_labels

test_images.shape

len(test_labels)

"""Una vez explorado tenemos que empezar a pro-procesar la informacion """

plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

#Despues hay que procesar los valores en un rango de 0 a 1 que se logra diviendo las imagenes por el numero de pixeles (255)

train_images = train_images / 255.0

test_images = test_images / 255.0

#Antes de entrenar la red tenemos que asegurarnos que este en el formato correcto 

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

"""Ahora tenemos que construir el modelo """

#hay que configurar las capas 

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

#Una vez realizado tenemos que compilar el modelo 

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#ahora si podemos empezar a entrenar al modelo 

model.fit(train_images, train_labels, epochs=10)

#Una vez entrenada podemos evaluar su exactitud 

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

print('\nTest accuracy:', test_acc)

"""Con el modelo ya entrenado podemos comenzar a hacer predicciones """

predictions = model.predict(test_images)

predictions[0]

np.argmax(predictions[0])

test_labels[0]

#hay que graficarlo para poder ver el set de las predcciones 

def plot_image(i, predictions_array, true_label, img):
  predictions_array, true_label, img = predictions_array, true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img, cmap=plt.cm.binary)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  predictions_array, true_label = predictions_array, true_label[i]
  plt.grid(False)
  plt.xticks(range(10))
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')

#pongamoslo aprueba con la imagen 0 

i = 0
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions[i], test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions[i],  test_labels)
plt.show()

#ahora con la imagen 12 

i = 12
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions[i], test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions[i],  test_labels)
plt.show()

#ahora graficaremos varias imagenes 

num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions[i], test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions[i], test_labels)
plt.tight_layout()
plt.show()

"""Ya con el modelo entrenado lo usaremos para hacer una prediccion con una imagen unica"""

#Escogemos una imagen del conjunto de datos 
img = test_images[1]

print(img.shape)

# Agregamos la imagen a un batch donde se encuentra sola 
img = (np.expand_dims(img,0))

print(img.shape)

"""Ahora que nos prediga la etiqueta de la imagen"""

predictions_single = model.predict(img)

print(predictions_single)

plot_value_array(1, predictions_single[0], test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)

np.argmax(predictions_single[0])

"""El modelo predice que es la etiqueta 2 """